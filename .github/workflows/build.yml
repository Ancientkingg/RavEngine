name: CI
on: 
  push:
    paths-ignore: 
    - "README.md"
    - ".gitignore"
  pull_request:
    paths-ignore:
      - 'README.md'
      - ".gitignore"

jobs:
  build-linux:
    name: Linux x64 Compile Check
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        compiler: [ {cc: "/usr/bin/gcc-13", cxx: "/usr/bin/g++-13"}, {cc: "/usr/bin/clang-16", cxx: "/usr/bin/clang++-16" } ]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: true
      - name: Install Dependencies
        run: |
              sudo apt-get update -y
              sudo apt-get install -y lsb-release wget software-properties-common apt-utils
              wget -O - https://apt.llvm.org/llvm-snapshot.gpg.key|sudo apt-key add -
              sudo add-apt-repository -y "deb http://apt.llvm.org/jammy/ llvm-toolchain-jammy-16 main"
              sudo apt-get update -y
              sudo apt remove build-essential -y
              wget -qO- https://packages.lunarg.com/lunarg-signing-key-pub.asc | sudo tee /etc/apt/trusted.gpg.d/lunarg.asc
              sudo wget -qO /etc/apt/sources.list.d/lunarg-vulkan-jammy.list http://packages.lunarg.com/vulkan/lunarg-vulkan-jammy.list
              sudo apt update
              sudo apt install vulkan-sdk
              sudo apt-get install cmake g++-13 clang-16 llvm-16 ninja-build libgl1-mesa-dev uuid-dev libwayland-dev libxkbcommon-dev libasound2-dev libegl-dev libvulkan-dev libx11-xcb-dev libxcb-dri2-0-dev libxcb-glx0-dev libxcb-icccm4-dev libxcb-keysyms1-dev libxcb-randr0-dev libxrandr-dev libxxf86vm-dev mesa-common-dev -y --no-install-recommends
      - name: Configure
        run: |
            mkdir -p build 
            cd build
            CC=${{ matrix.compiler.cc }} CXX=${{ matrix.compiler.cxx }} cmake -G "Ninja" .. 
      - name: Build
        run: cd build; cmake --build . --config Release --target RavEngine
      
  build-emscripten:
    name: Emscripten-Linux Compile Check
    runs-on: ubuntu-latest
    if: false
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: true
      - name: Install Dependencies
        run: sudo apt-get update && sudo apt-get install cmake clang python3 libgl1-mesa-dev uuid-dev libwayland-dev libxkbcommon-dev libegl-dev -y --no-install-recommends
      - name: Setup Emscripten
        run: git clone https://github.com/emscripten-core/emsdk.git --depth=1 && cd emsdk && ./emsdk install latest && ./emsdk activate latest && source ./emsdk_env.sh
      - name: Configure
        run: mkdir -p build && cd build; cmake -DCMAKE_TOOLCHAIN_FILE=../emsdk/upstream/emscripten/cmake/Modules/Platform/Emscripten.cmake .. 
      - name: Build
        run: cd build; cmake --build . --config Release --target RavEngine
 
  build-apple:
    name: Apple Compile Check
    strategy:
      fail-fast: false
      matrix: 
        platform: [iOS, tvOS, visionOS, '']
    runs-on: macos-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: true
      - name: Configure
        run: mkdir -p build && cd build; cmake -G "Xcode" -DCMAKE_SYSTEM_NAME=${{ matrix.platform }} .. 
      - name: Build
        run: cd build; cmake --build . --config release --target RavEngine -- -quiet
                
  build-windows:
    name: Windows Compile Check
    runs-on: windows-latest
    strategy:
        fail-fast: false
        matrix:
            arch: [x64, ARM64]
            target: [Windows, WindowsStore]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: true
      - name: Configure
        run: mkdir build && cd build; cmake -DCMAKE_SYSTEM_NAME=${{ matrix.target }} -DCMAKE_SYSTEM_VERSION="10.0" -Wno-dev -A${{ matrix.arch }} .. ; cmake ..
      - name: Build
        run: cd build; cmake --build . --config release --target RavEngine

  build-android:
    name: Android Compile Check
    runs-on: ubuntu-latest
    strategy:
        fail-fast: false
        matrix: 
          arch: [x86, x86_64, arm64-v8a, armeabi-v7a]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with: 
          submodules: true
      - name: Setup NDK
        id: setup-ndk
        uses: nttld/setup-ndk@v1
        with:
          ndk-version: r25c
      - name: Report NDK
        run: echo ${{ steps.setup-ndk.outputs.ndk-path }}
      - name: Install dependencies
        run: sudo apt update && sudo apt install ninja-build 
      - name: Configure
        run: |
          mkdir build && cd build
          cmake -G "Ninja" -DCMAKE_TOOLCHAIN_FILE="${{ steps.setup-ndk.outputs.ndk-path }}/build/cmake/android.toolchain.cmake" -DANDROID_ABI="${{ matrix.arch }}" -DANDROID_ARM_NEON=ON -DANDROID_PLATFORM=33 ..
      - name: Build
        run: |
          cd build
          cmake --build . --config release --target RavEngine
  
  test-linux:
    name: Linux Unit Tests
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: true
      - name: Install Dependencies
        run: |
              sudo apt-get update -y
              sudo apt-get install -y lsb-release wget software-properties-common apt-utils
              sudo apt-get update -y
              sudo apt remove build-essential -y
              CC=/usr/bin/gcc-13 CXX=/usr/bin/g++-13 sudo apt-get install cmake g++-13 gcc-13 ninja-build libwayland-dev libxkbcommon-dev libasound2-dev libvulkan-dev libx11-xcb-dev libxcb-dri2-0-dev libxcb-glx0-dev libxcb-icccm4-dev libxcb-keysyms1-dev libxcb-randr0-dev libxrandr-dev libxxf86vm-dev mesa-common-dev -y --no-install-recommends
      - name: Configure
        run: |
            mkdir -p build && cd build
            cmake -G "Ninja" -DRAVENGINE_BUILD_TESTS=ON ..
      - name: Build
        run: |
            cd build
            cmake --build . --config debug --target RavEngine_TestBasics
      - name: Test
        run: | 
          cd build
          ctest -C debug
      - name: Output test logs
        if: ${{ failure() }}
        run: cat build/Testing/Temporary/LastTest.log
        
  test-mac:
    name: macOS Unit Tests
    runs-on: macos-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: true
      - name: Build and Test
        run: cd test && ./test-mac.sh
      - name: Output test logs
        if: ${{ failure() }}
        run: cat build/Testing/Temporary/LastTest.log
        
  test-windows:
    name: Windows Unit Tests
    runs-on: windows-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: true
      - name: Build and Test
        run: cd test && .\test-win.bat
      - name: Output test logs
        if: ${{ failure() }}
        run: cat build\Testing\Temporary\LastTest.log
